Index: app/src/main/java/com/example/gatoshunter/VenderGato.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.gatoshunter\r\nimport android.os.Bundle\r\nimport android.os.Parcelable\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.gatoshunter.clases.Comprador\r\nimport com.example.gatoshunter.adaptes.CompradorAdapter\r\nimport com.example.gatoshunter.clases.Gato\r\nimport com.example.miapp.database.DatabaseHelper\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport java.util.Calendar\r\n\r\nclass VenderGato : AppCompatActivity() {\r\n\r\n    private lateinit var dbHelper: DatabaseHelper\r\n\r\n    private lateinit var adapter: CompradorAdapter\r\n    private lateinit var timerTextView: TextView\r\n    private lateinit var temporizadorMedianoche: TemporizadorMedianoche\r\n\r\n    private var currentDailyBuyersList: List<CompradorConGato> = emptyList()\r\n\r\n    private val COMPRADORES_PREFS_NAME = \"CompradoresDiariosPrefs\"\r\n    private val GATOS_PREFS_NAME = \"GatosDiariosPrefs\"\r\n    private val KEY_COMPRADOR_IDS = \"comprador_ids_daily\"\r\n    private val KEY_LAST_GENERATION_TIMESTAMP = \"last_generation_timestamp\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.vender_gatos)\r\n\r\n        val backButton: Button = findViewById(R.id.backbutton)\r\n        val sellButton: Button = findViewById(R.id.sellbutton)\r\n        timerTextView = findViewById(R.id.temporizador)\r\n\r\n        dbHelper = DatabaseHelper(this)\r\n\r\n        val recyclerView: RecyclerView = findViewById(R.id.recyclerView)\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        recyclerView.setHasFixedSize(true)\r\n        adapter = CompradorAdapter(emptyList()) { compradorConGato ->\r\n            intentarVenderDesdeClick(compradorConGato)\r\n        }\r\n        recyclerView.adapter = adapter\r\n\r\n\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            currentDailyBuyersList = loadOrCreateDailyBuyers()\r\n            withContext(Dispatchers.Main) {\r\n                adapter.actualizarLista(currentDailyBuyersList)\r\n            }\r\n        }\r\n\r\n        //Botones\r\n        backButton.setOnClickListener { finish() }\r\n\r\n        sellButton.setOnClickListener { intentarVender() }\r\n\r\n        // Timer\r\n        temporizadorMedianoche = TemporizadorMedianoche(timerTextView) {\r\n            lifecycleScope.launch(Dispatchers.IO) {\r\n                updateRecyclerViewData()\r\n            }\r\n        }\r\n        temporizadorMedianoche.iniciar()\r\n    }\r\n\r\n\r\n\r\n    //Cargar compradores diarios o crear si es un nuevo día\r\n    private fun loadOrCreateDailyBuyers(): List<CompradorConGato> {\r\n        val savedBuyersWithCats = cargarCompradoresDiarios()\r\n        val lastTimestamp = cargarUltimaGeneracionTimestamp()\r\n        val currentCalendar = Calendar.getInstance()\r\n        val lastGenerationCalendar = Calendar.getInstance().apply { timeInMillis = lastTimestamp }\r\n\r\n        val isSameDay = lastTimestamp != 0L &&\r\n                currentCalendar.get(Calendar.YEAR) == lastGenerationCalendar.get(Calendar.YEAR) &&\r\n                currentCalendar.get(Calendar.DAY_OF_YEAR) == lastGenerationCalendar.get(Calendar.DAY_OF_YEAR)\r\n\r\n        val allPotentialBuyers = dbHelper.obtenerCompradores()\r\n        val allPotentialGatos = dbHelper.obtenerGatos()\r\n\r\n        return if (isSameDay) {\r\n            // Si es el mismo día, intenta cargar los compradores con sus gatos guardados.\r\n            savedBuyersWithCats.mapNotNull { (buyerId, catName) ->\r\n                allPotentialBuyers.find { it.id == buyerId }?.let { CompradorConGato(it, catName) }\r\n            }\r\n\r\n        } else {\r\n            // Si es un nuevo día, genera nuevos compradores y asigna gatos aleatorios.\r\n            Log.d(\"VenderGato\", \"Nuevo día o no timestamp. Generando nuevos compradores con gatos.\")\r\n            selectAndSaveNewDailyBuyers(allPotentialBuyers, allPotentialGatos)\r\n        }\r\n\r\n    }\r\n\r\n    data class CompradorConGato(val comprador: Comprador, val nombreGatoInteres: String?)\r\n\r\n    // Helper function to select 3 random buyers and save their IDs and the current timestamp\r\n    private fun selectAndSaveNewDailyBuyers(allPotentialBuyers: List<Comprador>, gatos: List<Gato>): List<CompradorConGato> {\r\n        // Ensure we don't select more buyers than available\r\n        val numberOfBuyersToSelect = minOf(3, allPotentialBuyers.size)\r\n        val selectedBuyers = allPotentialBuyers.shuffled().take(numberOfBuyersToSelect)\r\n        val selectedGatos = gatos.shuffled().take(numberOfBuyersToSelect)\r\n\r\n        val compradoresConGato = selectedBuyers.zip(selectedGatos) { comprador, gato ->\r\n            CompradorConGato(comprador, gato.nombre)\r\n        }\r\n\r\n        // Save the new list of IDs and the current timestamp\r\n        guardarCompradoresDiarios(\r\n            compradoresConGato.mapNotNull { it.comprador.id },\r\n            compradoresConGato.mapNotNull { it.nombreGatoInteres }\r\n        )\r\n        guardarUltimaGeneracionTimestamp(System.currentTimeMillis())\r\n\r\n        Log.d(\"VenderGato\", \"Selected and saved new daily buyers with cats: ${compradoresConGato.joinToString { \"${it.comprador.nombre} -> ${it.nombreGatoInteres}\" }}\")\r\n        return compradoresConGato\r\n    }\r\n\r\n\r\n    // Guardar los compradores del dia (IDs)\r\n    private fun guardarCompradoresDiarios(ids: List<Int>, gatosNames: List<String>) {\r\n        val prefs = getSharedPreferences(COMPRADORES_PREFS_NAME, MODE_PRIVATE)\r\n        prefs.edit().putString(KEY_COMPRADOR_IDS, ids.joinToString(\",\")).apply()\r\n        prefs.edit().putString(GATOS_PREFS_NAME, gatosNames.joinToString(\",\")).apply()\r\n    }\r\n\r\n    // Cargar los compradores del dia (IDs) con los nombres de los gatos\r\n    private fun cargarCompradoresDiarios(): List<Pair<Int, String>> {\r\n        val prefs = getSharedPreferences(COMPRADORES_PREFS_NAME, MODE_PRIVATE)\r\n        val idsString = prefs.getString(KEY_COMPRADOR_IDS, null)\r\n        val gatosNames = prefs.getString(GATOS_PREFS_NAME, null)\r\n        return if (idsString.isNullOrEmpty() || gatosNames.isNullOrEmpty()) {\r\n            emptyList()\r\n        } else {\r\n            try {\r\n                val ids = idsString.split(\",\").mapNotNull { it.toIntOrNull() }\r\n                val nombresDeGatos = gatosNames.split(\",\")\r\n                // Asegurarse de que ambas listas tengan la misma cantidad de elementos\r\n                if (ids.size == nombresDeGatos.size) {\r\n                    ids.zip(nombresDeGatos) { id, nombreGato -> Pair(id, nombreGato) }\r\n                } else {\r\n                    Log.w(\"VenderGato\", \"Mismatch en la cantidad de IDs de compradores y nombres de gatos guardados.\")\r\n                    emptyList()\r\n                }\r\n            } catch (e: Exception) {\r\n                Log.e(\"VenderGato\", \"Error al parsear los compradores o los nombres de los gatos desde SharedPreferences\", e)\r\n                emptyList()\r\n            }\r\n        }\r\n    }\r\n\r\n    // Guardar el timestamp de la última generación de compradores\r\n    private fun guardarUltimaGeneracionTimestamp(timestamp: Long) {\r\n        val prefs = getSharedPreferences(COMPRADORES_PREFS_NAME, MODE_PRIVATE)\r\n        prefs.edit().putLong(KEY_LAST_GENERATION_TIMESTAMP, timestamp).apply()\r\n    }\r\n\r\n    // Cargar el timestamp de la última generación de compradores\r\n    private fun cargarUltimaGeneracionTimestamp(): Long {\r\n        val prefs = getSharedPreferences(COMPRADORES_PREFS_NAME, MODE_PRIVATE)\r\n        return prefs.getLong(KEY_LAST_GENERATION_TIMESTAMP, 0L) // Default to 0 if not found\r\n    }\r\n\r\n\r\n    // Resetear Compradores a media noche\r\n    private suspend fun updateRecyclerViewData() {\r\n        val allPotentialBuyers = dbHelper.obtenerCompradores() // Get ALL potential buyers from DB\r\n        val allPotentialGatos = dbHelper.obtenerGatos() // Get ALL potential gatos from DB\r\n        val nuevosCompradores = selectAndSaveNewDailyBuyers(allPotentialBuyers, allPotentialGatos) // Select new ones and save IDs and timestamp\r\n\r\n        withContext(Dispatchers.Main) {\r\n            currentDailyBuyersList = nuevosCompradores // Actualizar la lista in-memory\r\n            Toast.makeText(this@VenderGato, \"¡Medianoche alcanzada! Recargando compradores...\", Toast.LENGTH_SHORT).show()\r\n            adapter.actualizarLista(currentDailyBuyersList) // Actualizar adapter\r\n            adapter.selectedItemId = null // Deselect any previous buyer\r\n        }\r\n    }\r\n\r\n\r\n    // Modified selling logic using the activity's currentDailyBuyersList\r\n    private fun intentarVender() {\r\n        val compradorSeleccionadoId = adapter.selectedItemId\r\n        if (compradorSeleccionadoId == null) {\r\n            Toast.makeText(this, \"Selecciona un comprador primero\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        val compradorSeleccionado = currentDailyBuyersList.find { it.comprador.id == compradorSeleccionadoId }\r\n\r\n        if (compradorSeleccionado == null) {\r\n            Toast.makeText(this, \"Error: Comprador no encontrado.\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        lifecycleScope.launch(Dispatchers.Main) {\r\n            val prefs = applicationContext.getAppSharedPreferences()\r\n            val user = prefs.getUserAsync(\"Usuario\")!!\r\n            val gatosUsuario = dbHelper.obtenerGatosByUser(user)\r\n\r\n            val gatoEncontrado = gatosUsuario.find { it.nombre == compradorSeleccionado.nombreGatoInteres }\r\n\r\n            if (gatoEncontrado == null) {\r\n                Toast.makeText(this@VenderGato, \"No tienes un gato con ese nombre\", Toast.LENGTH_SHORT).show()\r\n                return@launch\r\n            }\r\n\r\n            mostrarDialogoVenta(compradorSeleccionado)\r\n        }\r\n    }\r\n\r\n    private fun mostrarDialogoVenta(compradorConGato: CompradorConGato) {\r\n        val dialogView = layoutInflater.inflate(R.layout.dialog_info_comprador, null)\r\n\r\n        val precioEditText = dialogView.findViewById<EditText>(R.id.precioEditText)\r\n        val btnVender = dialogView.findViewById<Button>(R.id.btnVender)\r\n        val btnCancelar = dialogView.findViewById<Button>(R.id.btnCancelar)\r\n\r\n        val dialog = android.app.AlertDialog.Builder(this)\r\n            .setView(dialogView)\r\n            .create()\r\n\r\n        btnVender.setOnClickListener {\r\n            val precioStr = precioEditText.text.toString()\r\n            val precio = precioStr.toDoubleOrNull()\r\n\r\n            if (precio == null || precio <= 0) {\r\n                Toast.makeText(this, \"Introduce un precio válido\", Toast.LENGTH_SHORT).show()\r\n                return@setOnClickListener\r\n            }\r\n\r\n            val comprador = compradorConGato.comprador\r\n\r\n            if (comprador.dinero >= precio) {\r\n                // Resta el precio al dinero del comprador\r\n                comprador.dinero -= precio\r\n\r\n                // Actualiza la BD en background\r\n                lifecycleScope.launch(Dispatchers.IO) {\r\n                    comprador.id?.let { it1 -> dbHelper.actualizarDineroComprador(it1, comprador.dinero) }\r\n                }\r\n\r\n                Toast.makeText(this, \"Venta realizada por $precio €\", Toast.LENGTH_SHORT).show()\r\n\r\n                // Cierra el diálogo\r\n                dialog.dismiss()\r\n\r\n                // Actualiza UI (elimina comprador vendido)\r\n                comprador.id?.let { it1 -> adapter.eliminarComprador(it1) }\r\n                adapter.selectedItemId = null\r\n                currentDailyBuyersList = currentDailyBuyersList.filter { it.comprador.id != comprador.id }\r\n\r\n            } else {\r\n                Toast.makeText(this, \"El comprador no tiene suficiente dinero\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n        btnCancelar.setOnClickListener {\r\n            dialog.dismiss()\r\n        }\r\n\r\n        dialog.show()\r\n    }\r\n    private fun intentarVenderDesdeClick(compradorConGato: CompradorConGato) {\r\n        lifecycleScope.launch(Dispatchers.Main) {\r\n            val prefs = applicationContext.getAppSharedPreferences()\r\n            val user = prefs.getUserAsync(\"Usuario\")!!\r\n            val gatosUsuario = dbHelper.obtenerGatosByUser(user)\r\n\r\n            val gatoEncontrado = gatosUsuario.find { it.nombre == compradorConGato.nombreGatoInteres }\r\n\r\n            if (gatoEncontrado == null) {\r\n                Toast.makeText(this@VenderGato, \"No tienes un gato con ese nombre\", Toast.LENGTH_SHORT).show()\r\n                return@launch\r\n            }\r\n\r\n            mostrarDialogoVenta(compradorConGato)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/gatoshunter/VenderGato.kt b/app/src/main/java/com/example/gatoshunter/VenderGato.kt
--- a/app/src/main/java/com/example/gatoshunter/VenderGato.kt	(revision b6f6082858f5ca03ab3a354f6a7633c65d58c47b)
+++ b/app/src/main/java/com/example/gatoshunter/VenderGato.kt	(date 1747677228100)
@@ -51,6 +51,7 @@
         adapter = CompradorAdapter(emptyList()) { compradorConGato ->
             intentarVenderDesdeClick(compradorConGato)
         }
+        
         recyclerView.adapter = adapter
 
 
