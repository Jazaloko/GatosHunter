Index: app/src/main/java/com/example/gatoshunter/BuscarGato.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.gatoshunter\r\n\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.gatoshunter.clases.Gato\r\nimport com.example.gatoshunter.adaptes.GatoAdapter\r\nimport com.example.miapp.database.DatabaseHelper\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\n\r\nclass BuscarGato : AppCompatActivity() {\r\n\r\n    private lateinit var dbHelper: DatabaseHelper\r\n    private lateinit var adapter: GatoAdapter\r\n    private lateinit var timerTextView: TextView\r\n    private var ultimoGatoCompradoId: Int? = null\r\n    private lateinit var temporizadorMedianoche: TemporizadorMedianoche\r\n\r\n    // SharedPreferences constants\r\n    private val PREFS_NAME = \"GatosDiariosPrefs\"\r\n    private val KEY_GATO_IDS = \"gato_ids_daily\"\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.buscar_gatos)\r\n\r\n        val backButton: Button = findViewById(R.id.backbutton)\r\n        val buyButton: Button = findViewById(R.id.buybutton)\r\n        timerTextView = findViewById(R.id.temporizador)\r\n\r\n        dbHelper = DatabaseHelper(this)\r\n\r\n        val recyclerView: RecyclerView = findViewById(R.id.recyclerView)\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        recyclerView.setHasFixedSize(true)\r\n\r\n        // --- Cat Loading Logic (using filtering) ---\r\n        val gatosToShow: List<Gato> = loadOrCreateDailyCats()\r\n        adapter = GatoAdapter(gatosToShow, null) // Initialize adapter with the loaded/new cats\r\n        recyclerView.adapter = adapter\r\n        // --- End Cat Loading Logic ---\r\n\r\n//        val gatos = dbHelper.obtenerGatosLibres()?.shuffled()?.take(3) ?: emptyList()\r\n//        guardarGatosMostradosEnPrefs(gatos.mapNotNull { it.id })\r\n//\r\n//        adapter = GatoAdapter(gatos)\r\n//        recyclerView.adapter = adapter\r\n\r\n        backButton.setOnClickListener { finish() }\r\n\r\n        buyButton.setOnClickListener { resolverCompra() }\r\n\r\n        // --- Initialize and start the timer ---\r\n        // TemporizadorMedianoche logic triggers the lambda at midnight.\r\n        temporizadorMedianoche = TemporizadorMedianoche(timerTextView) {\r\n            // This lambda executes when the timer reaches midnight\r\n            lifecycleScope.launch(Dispatchers.IO) { // Perform DB operations on IO thread\r\n                // Lógica para recargar los gatos:\r\n                val allCats = dbHelper.obtenerGatos() // Get ALL free cats\r\n                val nuevosGatos = allCats.shuffled().take(3) // Select 3 random from current free cats\r\n                val nuevosGatoIds = nuevosGatos.mapNotNull { it.id }\r\n\r\n                // Save the new daily cat IDs (overwriting previous ones)\r\n                guardarGatosDiarios(nuevosGatoIds)\r\n\r\n                // Fetch the actual Gato objects for the adapter by filtering\r\n                // The list `nuevosGatos` already contains the selected cats,\r\n                // but re-filtering from `allFreeCats` ensures consistency if the\r\n                // list was modified between fetching all and shuffling.\r\n                // However, since we just selected them, `nuevosGatos` is correct.\r\n                // Let's directly use `nuevosGatos` to avoid unnecessary re-filtering right after selection.\r\n                val gatosParaAdapter = nuevosGatos\r\n\r\n\r\n                runOnUiThread {\r\n                    Toast.makeText(this@BuscarGato, \"¡Medianoche alcanzada! Recargando gatos...\", Toast.LENGTH_SHORT).show()\r\n                    adapter.actualizarLista(gatosParaAdapter) // Update adapter with new list\r\n                    adapter.selectedItemId = null // Deselect any previous cat\r\n                }\r\n            }\r\n            // The timer restarts automatically for the next day within the TemporizadorMedianoche class\r\n        }\r\n        temporizadorMedianoche.iniciar()\r\n\r\n\r\n    }\r\n\r\n    // Function to load saved daily cat IDs or select new ones\r\n    private fun loadOrCreateDailyCats(): List<Gato> {\r\n        val savedCatIds = cargarGatosDiarios() // Load IDs from SharedPreferences\r\n        val allCats = dbHelper.obtenerGatos() // Get ALL free cats from DB\r\n\r\n        return if (savedCatIds.isNotEmpty()) {\r\n            // Filter the list in memory based on saved IDs\r\n            allCats.filter { it.id in savedCatIds }\r\n        } else {\r\n            // No daily cats saved, select new ones and save their IDs\r\n            val selectedCats = allCats.shuffled().take(3) // Select 3 random\r\n            val selectedCatIds = selectedCats.mapNotNull { it.id }\r\n            guardarGatosDiarios(selectedCatIds) // Save the selected IDs for the day\r\n            selectedCats // Return the newly selected cats\r\n        }\r\n    }\r\n\r\n\r\n    // Helper function to save daily cat IDs to SharedPreferences\r\n    private fun guardarGatosDiarios(ids: List<Int>) {\r\n        val prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE)\r\n        // Store IDs as a comma-separated string\r\n        prefs.edit().putString(KEY_GATO_IDS, ids.joinToString(\",\")).apply()\r\n    }\r\n\r\n\r\n\r\n    private fun cargarGatosDiarios(): List<Int> {\r\n        val prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE)\r\n        val idsString = prefs.getString(KEY_GATO_IDS, null)\r\n        // If string is null or empty, return empty list\r\n        return if (idsString.isNullOrEmpty()) {\r\n            emptyList()\r\n        } else {\r\n            // Split the string by comma and convert each part to an integer\r\n            try {\r\n                idsString.split(\",\").mapNotNull { it.toIntOrNull() }\r\n            } catch (e: Exception) {\r\n                // Handle potential parsing errors, return empty list\r\n                Log.e(\"BuscarGato\", \"Error parsing gato_ids_daily from SharedPreferences\", e)\r\n                emptyList()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun resolverCompra() {\r\n        lifecycleScope.launch(Dispatchers.IO) {\r\n            val prefs = applicationContext.getAppSharedPreferences()\r\n            val user = prefs.getUserAsync(\"Usuario\")\r\n\r\n            val gatoSeleccionado = adapter.getGatoSeleccionado()\r\n            if (gatoSeleccionado != null && user != null) {\r\n                dbHelper.insertarGatoUser(gatoSeleccionado, user)\r\n                ultimoGatoCompradoId = gatoSeleccionado.id\r\n\r\n                runOnUiThread {\r\n                    adapter.eliminarGato(gatoSeleccionado.id!!)\r\n                    adapter.selectedItemId = null\r\n                    mostrarDialogoExito()\r\n                }\r\n            } else {\r\n                runOnUiThread {\r\n                    Toast.makeText(this@BuscarGato, \"Selecciona un gato primero\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun mostrarDialogoExito() {\r\n        val dialogView = layoutInflater.inflate(R.layout.dialog_compra_exitosa, null)\r\n\r\n        val dialog = android.app.AlertDialog.Builder(this)\r\n            .setView(dialogView)\r\n            .setCancelable(false)\r\n            .create()\r\n\r\n        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)\r\n\r\n        dialogView.findViewById<Button>(R.id.btnAceptar).setOnClickListener {\r\n            dialog.dismiss()\r\n            mostrarDialogoNombreGato()\r\n        }\r\n\r\n        dialog.show()\r\n    }\r\n\r\n    private fun mostrarDialogoNombreGato() {\r\n        val input = EditText(this).apply {\r\n            hint = \"Ej: Pelusa\"\r\n            setPadding(50, 40, 50, 40)\r\n        }\r\n\r\n        android.app.AlertDialog.Builder(this)\r\n            .setTitle(\"Ponle un nombre a tu gato\")\r\n            .setView(input)\r\n            .setCancelable(false)\r\n            .setPositiveButton(\"Guardar\") { d, _ ->\r\n                val nuevoNombre = input.text.toString().trim()\r\n                if (nuevoNombre.isNotEmpty() && ultimoGatoCompradoId != null) {\r\n                    lifecycleScope.launch(Dispatchers.IO) {\r\n                        dbHelper.actualizarNombreGato(ultimoGatoCompradoId!!, nuevoNombre)\r\n                    }\r\n                    Toast.makeText(this, \"¡Nombre guardado!\", Toast.LENGTH_SHORT).show()\r\n                } else {\r\n                    Toast.makeText(this, \"Nombre no válido\", Toast.LENGTH_SHORT).show()\r\n                }\r\n                d.dismiss()\r\n            }\r\n            .show()\r\n    }\r\n\r\n    private fun guardarGatosMostradosEnPrefs(ids: List<Int>) {\r\n        val prefs = getSharedPreferences(\"GatosPrefs\", MODE_PRIVATE)\r\n        prefs.edit().putString(\"gatos_ids\", ids.joinToString(\",\")).apply()\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/gatoshunter/BuscarGato.kt b/app/src/main/java/com/example/gatoshunter/BuscarGato.kt
--- a/app/src/main/java/com/example/gatoshunter/BuscarGato.kt	(revision 50ff2d664e686a4bb0480d4c409aa11ee5e3ca8d)
+++ b/app/src/main/java/com/example/gatoshunter/BuscarGato.kt	(date 1747677286696)
@@ -49,11 +49,6 @@
         recyclerView.adapter = adapter
         // --- End Cat Loading Logic ---
 
-//        val gatos = dbHelper.obtenerGatosLibres()?.shuffled()?.take(3) ?: emptyList()
-//        guardarGatosMostradosEnPrefs(gatos.mapNotNull { it.id })
-//
-//        adapter = GatoAdapter(gatos)
-//        recyclerView.adapter = adapter
 
         backButton.setOnClickListener { finish() }
 
@@ -212,4 +207,4 @@
     }
 
 
-}
+}
\ No newline at end of file
